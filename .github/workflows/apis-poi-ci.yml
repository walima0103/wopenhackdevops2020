name: apis-poi-ci
env:
  build_name: apis-poi-ci
  registry: openhackdu442g69acr.azurecr.io
  repository: devopsoh/api-poi
  docker_path: apis/poi/web

on:
  push:
    branches: [ master ]
    paths:
      - apis/poi/**
      - .github/workflows/apis-poi-ci.yml
        
  pull_request:
    branches: [ master ]
    paths:
      - apis/poi/**
      - .github/workflows/apis-poi-ci.yml

jobs:
  apis-poi-ci-build:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
    - name: Setup .NET Core
      uses: actions/setup-dotnet@v1
    - name: Install dependencies Web
      run: dotnet restore apis/poi/web/*.csproj
    - name: Build Web
      run: dotnet build --configuration Release --no-restore apis/poi/web/*.csproj
    - name: Install dependencies UnitTests
      run: dotnet restore apis/poi/tests/UnitTests/*.csproj
    - name: Build UnitTests
      run: dotnet build --configuration Release --no-restore apis/poi/tests/UnitTests/*.csproj
    - name: Test
      run: dotnet test --no-restore --verbosity normal apis/poi/tests/UnitTests/
    - uses: actions/github-script@0.9.0
      if: failure()
      with:
        github-token: ${{secrets.GITHUB_TOKEN}}
        script: |
          let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
          github.issues.create({
            owner: context.repo.owner,
            repo: context.repo.repo,
            title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
            body: body
          });
          
  apis-poi-cd:
    if: github.ref == 'refs/heads/master'
    runs-on: ubuntu-latest
    needs: [apis-poi-ci-build]
    
    steps:
      - uses: actions/checkout@v2
      
      - name: Docker login
        run: docker login -u ${{ secrets.ACR_USER }} -p ${{ secrets.ACR_KEY }} ${{ env.registry }}
        
      - name: Docker build
        run: docker build -t ${{ env.registry }}/${{ env.repository }}:${{ github.run_number }} --build-arg build_version=${{ github.run_number }} ${{ env.docker_path }}
        
      - name: Docker push
        run: docker push ${{ env.registry }}/${{ env.repository }}:${{ github.run_number }}
      
      - name: Azure Login
        uses: Azure/login@v1.1
        with:
          # Paste output of `az ad sp create-for-rbac` as value of secret variable: AZURE_CREDENTIALS
          creds: ${{ secrets.AZURE_CREDENTIALS }}
          # Set this value to true to enable Azure PowerShell Login in addition to Az CLI login
          # enable-AzPSSession: # optional
      
      - name: Azure WebApp Deploy
        uses: Azure/webapps-deploy@v2
        with:
          # Name of the Azure Web App
          app-name: openhackdu442g69poi
    
          # Applies to Web App only: Publish profile (*.publishsettings) file contents with Web Deploy secrets
          # publish-profile: # optional
    
          # Enter an existing Slot other than the Production slot
          slot-name: staging # optional, default is production

          # Applies to Web App only: Path to package or folder. *.zip, *.war, *.jar or a folder to deploy
          # package: # optional, default is .
    
          # Applies to Web App Containers only: Specify the fully qualified container image(s) name. For example, 'myregistry.azurecr.io/nginx:latest' or 'python:3.7.2-alpine/'. For multi-container scenario multiple container image names can be provided (multi-line separated)
          images: ${{ env.registry }}/${{ env.repository }}:${{ github.run_number }}
    
          # Applies to Web App Containers only: Path of the Docker-Compose file. Should be a fully qualified path or relative to the default working directory. Required for multi-container scenario
          # configuration-file: # optional
    
          # Enter the start up command. For ex. dotnet run or dotnet run
          # startup-command: # optional
      
      - uses: actions/github-script@0.9.0
        if: failure()
        with:
          github-token: ${{secrets.GITHUB_TOKEN}}
          script: |
            let body = "${{ env.build_name }} Worflow Failure \n Build Number: ${{ github.run_number }} \n Build Log: https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }} \n SHA: [${{ github.sha }}](https://github.com/${{ github.repository }}/commit/${{ github.sha }}) \n";
            github.issues.create({
              owner: context.repo.owner,
              repo: context.repo.repo,
              title: "${{ env.build_name }} Workflow ${{ github.run_number }} Failed! ",
              body: body
            });
